-- CS4400 Introduction to Database Systems (v11/Thursday, April 16, 2020)
-- Self-Contained Auto-Grading/Testing Script for Phase 3 of the Course Project

-- These tables are used to store the answers and test results.  The answers are generated by executing
-- the test script against our reference solution.  The test results are collected by running the test
-- script against your submission in order to compare the results.

DROP TABLE IF EXISTS magic44_answers;
CREATE TABLE magic44_answers (
	step_ID INT NOT NULL,
	row_hash varchar(2000) NOT NULL
);

DROP TABLE IF EXISTS magic44_test_results;
CREATE TABLE magic44_test_results (
	step_ID INT NOT NULL,
	row_hash VARCHAR(2000) NOT NULL
);

-- The magic44_count_differences view displays the differences between the number of rows contained in
-- the answers and the test results.  The value NULL in the answer_total and result_total columns
-- represents zero (0) rows for that query result.

DROP VIEW IF EXISTS magic44_count_answers;
CREATE VIEW magic44_count_answers AS
	select step_ID, count(*) as answer_total
	from magic44_answers group by step_ID;

DROP VIEW IF EXISTS magic44_count_test_results;
CREATE VIEW magic44_count_test_results AS
	select step_ID, count(*) as result_total
	from magic44_test_results group by step_ID;

DROP VIEW IF EXISTS magic44_count_differences;
CREATE VIEW magic44_count_differences AS
    select magic44_count_answers.step_ID, answer_total, result_total
	from magic44_count_answers left outer join magic44_count_test_results
	on magic44_count_answers.step_ID = magic44_count_test_results.step_ID
	where answer_total <> result_total or result_total is null
	union
	select magic44_count_test_results.step_ID, answer_total, result_total
	from magic44_count_test_results left outer join magic44_count_answers
	on magic44_count_test_results.step_ID = magic44_count_answers.step_ID
	where result_total <> answer_total or answer_total is null
	order by step_ID;

-- The magic44_content_differences view displays the differences between the answers and test results
-- in terms of the row attributes and values.  The error_category column contains MISSING for rows that
-- are not included in the test results but should be, while EXTRA represents the rows that should not
-- be included in the test results.  The row_hash column contains the values of the row in a single
-- string with the attribute values separated by a selected delimeter (i.e., the pound sign/#).

DROP VIEW IF EXISTS magic44_content_differences;
CREATE VIEW magic44_content_differences AS
	select step_ID, 'missing' as 'category', row_hash
	from magic44_answers where concat(step_ID, '@', row_hash) not in
	(select concat(step_ID, '@', row_hash) from magic44_test_results)
	union
	select step_ID, 'extra' as 'category', row_hash
	from magic44_test_results where concat(step_ID, '@', row_hash) not in
	(select concat(step_ID, '@', row_hash) from magic44_answers)
	order by step_ID;

-- The testing script is loaded below.  The tests for select queries are evaluated directly by executing
-- the corresponding stored procedures, and then comparing the actual results to the expected results
-- listed in the tables above. Insert, update and delete queries are evaluated indirectly by re-executing
-- select queries to identify changes to the appropriate tables. 

-- There are a total of forty-one (41) steps in this script divided into different areas of focus:

-- The first three (3) steps of this script [step #1 through step #3] are designed to evaluate the select
-- queries in an unfiltered manner as much as possible, to help confirm that the initial data has been
-- loaded correctly.

-- The next seven (7) steps of this script [step #4 through step #10] are designed to evaluate the
-- capabilities to register new users successfully.

-- The next eight (8) steps of this script [step #11 through step #18] are designed to ensure that users
-- will not be registered in violation of any of the designated constraints.

-- The next six (6) steps of this script [step #19 through step #24] are designed to evaluate the output
-- from some of the manager-role based output screens.  You were given some code for these queries and
-- asked to check them to determine if they work properly.

-- The next six (6) steps of this script [step #25 through step #30] are designed to evaluate the output
-- from some of the customer-role based output screens.  These were queries that you were expected to design
-- and implement from scratch.

-- The final eleven (11) steps of this script [step #31 through step #41] are designed to evaluate the
-- capabilities needed to place orders, and ensure that those orders are placed in accordance with the
-- designated constraints.

-- [step #1: query 3] (completely unfiltered select queries - show info about buildings and stations)
CALL ad_filter_building_station('', '', '', null, null);
INSERT INTO magic44_test_results SELECT 1, CONCAT(IFNULL(buildingName, ''), '#', IFNULL(tags, ''), '#', IFNULL(stationName, ''), '#', IFNULL(capacity, ''), '#', IFNULL(foodTruckNames, '')) FROM ad_filter_building_station_result;

-- [step #2: query 14] (show info about foods)
CALL ad_filter_food('', null, null);
INSERT INTO magic44_test_results SELECT 2, CONCAT(IFNULL(foodName, ''), '#', IFNULL(menuCount, ''), '#', IFNULL(purchaseCount, '')) FROM ad_filter_food_result;

-- [step #3: query 26] (show food truck and menu item info)
CALL cus_filter_explore('', '', '', '', '');
INSERT INTO magic44_test_results SELECT 3, CONCAT(IFNULL(stationName, ''), '#', IFNULL(buildingName, ''), '#', IFNULL(foodTruckNames, ''), '#', IFNULL(foodNames, '')) FROM cus_filter_explore_result;

-- [step #4: query 1] (test basic login)
CALL login('beBatman!', 5555555555);
INSERT INTO magic44_test_results SELECT 4, CONCAT(IFNULL(username, ''), '#', IFNULL(userType, '')) FROM login_result;

-- [step #5: query 2] (register a new customer)
CALL register('cust10', '', 'Woo', 'Hoo', 1010101010, 47.1, null);

-- [step #6: query 1] (confirm success)
CALL login('cust10', 1010101010);
INSERT INTO magic44_test_results SELECT 6, CONCAT(IFNULL(username, ''), '#', IFNULL(userType, '')) FROM login_result;

-- [step #7: query 2] (register a new admin)
CALL register('admin21', 'admin21@gatech.eds', 'Watch', 'Stuff', 2342342342, null, 'Admin');

-- [step #8: query 1] (confirm success)
CALL login('admin21', 2342342342);
INSERT INTO magic44_test_results SELECT 8, CONCAT(IFNULL(username, ''), '#', IFNULL(userType, '')) FROM login_result;

-- [step #9: query 2] (register a new manager-customer)
CALL register('busyBody', 'busybody@gatech.eds', 'Shopping', 'Pro', 5615561556, 29, 'Manager');

-- [step #10: query 1] (confirm success)
CALL login('busyBody', 5615561556);
INSERT INTO magic44_test_results SELECT 10, CONCAT(IFNULL(username, ''), '#', IFNULL(userType, '')) FROM login_result;

-- [step #11: query 2] (attempt to register a user who's neither a customer nor an employee (should fail))
CALL register('couchPotato', '', 'Couch', 'Potato', 1231231231, null, 'Manager');

-- [step #12: query 1] (confirm failure)
CALL login('couchPotato', 1231231231);
INSERT INTO magic44_test_results SELECT 12, CONCAT(IFNULL(username, ''), '#', IFNULL(userType, '')) FROM login_result;

-- [step #13: query 2] (attempt to register a customer with a negative balance (should fail))
CALL register('overSpent', '', 'Credit', 'Poor', 9999999999, -27.03, null);

-- [step #14: query 1] (confirm failure)
CALL login('overSpent', 9999999999);
INSERT INTO magic44_test_results SELECT 14, CONCAT(IFNULL(username, ''), '#', IFNULL(userType, '')) FROM login_result;

-- [step #15: query 2] (attempt to register a user with too short of a password (should fail))
CALL register('securityLeak', 'phish_me@gatech.eds', 'Easily', 'Hacked', 'hahaha', 20, 'Admin');

-- [step #16: query 1] (confirm failure)
CALL login('securityLeak', 'hahaha');
INSERT INTO magic44_test_results SELECT 16, CONCAT(IFNULL(username, ''), '#', IFNULL(userType, '')) FROM login_result;

-- [step #17: query 2] (attempt to register a user when the username would be duplicated (should fail))
CALL register('fumbleFingers', 'oopsie@gatech.eds', 'Smarty', 'Pants', 1243568790, 1001.34, 'Staff');

-- [step #18: query 1] (confirm failure)
CALL login('fumbleFingers', 123456789);
INSERT INTO magic44_test_results SELECT 18, CONCAT(IFNULL(username, ''), '#', IFNULL(userType, '')) FROM login_result;

-- [step #19: query 17] (select queries that are filtered by user role - some manager-related queries, starting with food truck queries for different managers)
CALL mn_filter_foodTruck('Manager1', '', '', null, null, FALSE);
INSERT INTO magic44_test_results SELECT 19, CONCAT(IFNULL(foodTruckName, ''), '#', IFNULL(stationName, ''), '#', IFNULL(remainingCapacity, ''), '#', IFNULL(staffCount, ''), '#', IFNULL(menuItemCount, '')) FROM mn_filter_foodTruck_result;

-- [step #20: query 17]
CALL mn_filter_foodTruck('Manager2', '', '', null, null, FALSE);
INSERT INTO magic44_test_results SELECT 20, CONCAT(IFNULL(foodTruckName, ''), '#', IFNULL(stationName, ''), '#', IFNULL(remainingCapacity, ''), '#', IFNULL(staffCount, ''), '#', IFNULL(menuItemCount, '')) FROM mn_filter_foodTruck_result;

-- [step #21: query 17]
CALL mn_filter_foodTruck('LadyVader1977', '', '', null, null, FALSE);
INSERT INTO magic44_test_results SELECT 21, CONCAT(IFNULL(foodTruckName, ''), '#', IFNULL(stationName, ''), '#', IFNULL(remainingCapacity, ''), '#', IFNULL(staffCount, ''), '#', IFNULL(menuItemCount, '')) FROM mn_filter_foodTruck_result;

-- [step #22: query 24] (show food trucks summaries for managers)
CALL mn_filter_summary('Manager1', '', '', null, null, null, null);
INSERT INTO magic44_test_results SELECT 22, CONCAT(IFNULL(foodTruckName, ''), '#', IFNULL(totalOrder, ''), '#', IFNULL(totalRevenue, ''), '#', IFNULL(totalCustomer, '')) FROM mn_filter_summary_result;

-- [step #23: query 24]
CALL mn_filter_summary('Manager2', '', '', null, null, null, null);
INSERT INTO magic44_test_results SELECT 23, CONCAT(IFNULL(foodTruckName, ''), '#', IFNULL(totalOrder, ''), '#', IFNULL(totalRevenue, ''), '#', IFNULL(totalCustomer, '')) FROM mn_filter_summary_result;

-- [step #24: query 24]
CALL mn_filter_summary('thereal_GPBurdell', '', '', null, null, null, null);
INSERT INTO magic44_test_results SELECT 24, CONCAT(IFNULL(foodTruckName, ''), '#', IFNULL(totalOrder, ''), '#', IFNULL(totalRevenue, ''), '#', IFNULL(totalCustomer, '')) FROM mn_filter_summary_result;

-- [step #25: query 28] (find the basic information for specific customers)
CALL cus_current_information_basic('customer1');
INSERT INTO magic44_test_results SELECT 25, CONCAT(IFNULL(stationName, ''), '#', IFNULL(buildingName, ''), '#', IFNULL(tags, ''), '#', IFNULL(description, ''), '#', IFNULL(balance, '')) FROM cus_current_information_basic_result;

-- [step #26: query 28]
CALL cus_current_information_basic('customer2');
INSERT INTO magic44_test_results SELECT 26, CONCAT(IFNULL(stationName, ''), '#', IFNULL(buildingName, ''), '#', IFNULL(tags, ''), '#', IFNULL(description, ''), '#', IFNULL(balance, '')) FROM cus_current_information_basic_result;

-- [step #27: query 28]
CALL cus_current_information_basic('notmybusiness');
INSERT INTO magic44_test_results SELECT 27, CONCAT(IFNULL(stationName, ''), '#', IFNULL(buildingName, ''), '#', IFNULL(tags, ''), '#', IFNULL(description, ''), '#', IFNULL(balance, '')) FROM cus_current_information_basic_result;

-- [step #28: query 29] (find the current food truck info for specific customers)
CALL cus_current_information_foodTruck('customer1');
INSERT INTO magic44_test_results SELECT 28, CONCAT(IFNULL(foodTruckName, ''), '#', IFNULL(managerName, ''), '#', IFNULL(foodNames, '')) FROM cus_current_information_foodTruck_result;

-- [step #29: query 29]
CALL cus_current_information_foodTruck('customer2');
INSERT INTO magic44_test_results SELECT 29, CONCAT(IFNULL(foodTruckName, ''), '#', IFNULL(managerName, ''), '#', IFNULL(foodNames, '')) FROM cus_current_information_foodTruck_result;

-- [step #30: query 29]
CALL cus_current_information_foodTruck('BuzzAsAYellowJacket');
INSERT INTO magic44_test_results SELECT 30, CONCAT(IFNULL(foodTruckName, ''), '#', IFNULL(managerName, ''), '#', IFNULL(foodNames, '')) FROM cus_current_information_foodTruck_result;

-- [step #31: query 30] (have a valid customer initiate an order)
CALL cus_order('2020-03-16', 'customer2');

-- [step #32: query 29] (confirm success)
CALL cus_current_information_foodTruck('customer2');
INSERT INTO magic44_test_results SELECT 32, CONCAT(IFNULL(foodTruckName, ''), '#', IFNULL(managerName, ''), '#', IFNULL(foodNames, '')) FROM cus_current_information_foodTruck_result;

-- [step #33: query 30] (have an invalid customer attempt to initiate an order)
CALL cus_order('2020-01-01', 'scoRa');

-- [step #34: query 29] (confirm failure)
CALL cus_current_information_foodTruck('scoRa');
INSERT INTO magic44_test_results SELECT 34, CONCAT(IFNULL(foodTruckName, ''), '#', IFNULL(managerName, ''), '#', IFNULL(foodNames, '')) FROM cus_current_information_foodTruck_result;

-- [step #35: query 31] (add more items to the order)
CALL cus_add_item_to_order('WaffleTruffle', 'Waffles', 6, 3);

-- [step #36: query 29] (confirm success)
CALL cus_current_information_foodTruck('customer2');
INSERT INTO magic44_test_results SELECT 36, CONCAT(IFNULL(foodTruckName, ''), '#', IFNULL(managerName, ''), '#', IFNULL(foodNames, '')) FROM cus_current_information_foodTruck_result;

-- [step #37: query 32]
CALL cus_order_history('customer2');
INSERT INTO magic44_test_results SELECT 37, CONCAT(IFNULL(date, ''), '#', IFNULL(orderID, ''), '#', IFNULL(orderTotal, ''), '#', IFNULL(foodNames, ''), '#', IFNULL(foodQuantity, '')) FROM cus_order_history_result;

-- [step #38: query 31] (attempt to add more items to the order unsuccessfully)
CALL cus_add_item_to_order('WaffleTruffle', 'Waffles', 9, 3);

-- [step #39: query 29] (confirm failure)
CALL cus_current_information_foodTruck('customer2');
INSERT INTO magic44_test_results SELECT 39, CONCAT(IFNULL(foodTruckName, ''), '#', IFNULL(managerName, ''), '#', IFNULL(foodNames, '')) FROM cus_current_information_foodTruck_result;

-- [step #40: query 32]
CALL cus_order_history('customer2');
INSERT INTO magic44_test_results SELECT 40, CONCAT(IFNULL(date, ''), '#', IFNULL(orderID, ''), '#', IFNULL(orderTotal, ''), '#', IFNULL(foodNames, ''), '#', IFNULL(foodQuantity, '')) FROM cus_order_history_result;

-- [step #41: query 14]
CALL ad_filter_food('', null, null);
INSERT INTO magic44_test_results SELECT 41, CONCAT(IFNULL(foodName, ''), '#', IFNULL(menuCount, ''), '#', IFNULL(purchaseCount, '')) FROM ad_filter_food_result;

-- The answers generated from the reference solution are loaded below.

INSERT INTO magic44_answers VALUES (1,'Clough#ADA,Labs,LEED#Clough Commons#20#BurgerBird,FourAnalystInATacoTruck'),(1,'College of Computing#Computing#CoC Court Yard#15#GoodFoodTruck,WaffleTruffle'),(1,'CrossLand Tower#LEED,Library###'),(1,'KLAUS Adv Computing#Computing###'),(1,'Molecular Engineering#Engineering#Bio Quad#20#GoodOnAStudentBudget,ShawarmaExpress'),(1,'Skiles#Liberal Arts#Skiles Walkway#11#FoodTrolley'),(1,'Students_Center#LEED#Campanile#7#BubbaGumps,CrazyPies,FoodTruckYoureLookingFor,FusionFoodTruck,JohnJaneAndVenison,NachoBizness,TruckOfFood'),(1,'TechTower#ADA,Registrar###'),(1,'Weber Building#ADA,Sciences###'),(2,'MargheritaPizza#2#4'),(2,'Pie#3#6'),(2,'VegPizza#2#5'),(2,'CeasarSalad#1#8'),(2,'HotDog#1#2'),(2,'CheeseBurger#2#8'),(2,'HamBurger#2#12'),(2,'Waffles#3#14'),(2,'ChickenWings#2#39'),(2,'SalmonTacos#3#13'),(2,'ChickenTacos#3#18'),(2,'ElkBurger#2#2'),(2,'Shawarma#1#8'),(2,'TrailMix#1#2'),(2,'Noodles#2#2'),(2,'VegSpringRolls#2#8'),(2,'Nachos#2#6'),(2,'VegetarianTacos#3#9'),(2,'ChocolateShake#3#7'),(2,'VegetarianGumbo#1#2'),(2,'ShrimpGumbo#1#1'),(2,'Bagels#0#0'),(2,'ChickenSandwich#0#0'),(2,'SouthWestChickenSalad#2#0'),(3,'Bio Quad#Molecular Engineering#GoodOnAStudentBudget,ShawarmaExpress#CeasarSalad,CheeseBurger,ChocolateShake,HamBurger,HotDog,Shawarma,Waffles'),(3,'Campanile#Students_Center#BubbaGumps,CrazyPies,FoodTruckYoureLookingFor,FusionFoodTruck,JohnJaneAndVenison,NachoBizness,TruckOfFood#ChickenTacos,ElkBurger,MargheritaPizza,Nachos,Noodles,Pie,SalmonTacos,ShrimpGumbo,SouthWestChickenSalad,TrailMix,VegetarianGumbo,VegetarianTacos,VegPizza,VegSpringRolls'),(3,'Clough Commons#Clough#BurgerBird,FourAnalystInATacoTruck#CheeseBurger,ChickenTacos,ChickenWings,ElkBurger,HamBurger,Pie,SalmonTacos,VegetarianTacos'),(3,'CoC Court Yard#College of Computing#GoodFoodTruck,WaffleTruffle#Noodles,SouthWestChickenSalad,VegSpringRolls,Waffles'),(3,'Skiles Walkway#Skiles#FoodTrolley#ChickenWings,ChocolateShake,Pie,Waffles'),(4,'beBatman!#Staff-Customer'),(6,'cust10#Customer'),(8,'admin21#Admin'),(10,'busyBody#Manager-Customer'),(19,'CrazyPies#Campanile#0#2#3'),(20,'NachoBizness#Campanile#0#1#4'),(20,'TruckOfFood#Campanile#0#1#2'),(21,'BurgerBird#Clough Commons#18#2#4'),(21,'FoodTrolley#Skiles Walkway#10#2#4'),(21,'FoodTruckYoureLookingFor#Campanile#0#1#4'),(22,'CrazyPies#2#23.90#2'),(23,'NachoBizness#3#97.00#3'),(23,'TruckOfFood#2#37.78#1'),(24,'GoodOnAStudentBudget#8#126.43#5'),(25,'Clough Commons#Clough#ADA,Labs,LEED#Has starbucks; located near to transit hub#46.99'),(26,'CoC Court Yard#College of Computing#Computing#Famously called as CoC#47.00'),(27,'Bio Quad#Molecular Engineering#Engineering#Hosts classes for molecular engineering#19.55'),(28,'BurgerBird#Leia Organa#CheeseBurger,ElkBurger,HamBurger,Pie'),(28,'FourAnalystInATacoTruck#Claude Shannon#ChickenTacos,ChickenWings,SalmonTacos,VegetarianTacos'),(29,'GoodFoodTruck#Claude Shannon#Noodles,SouthWestChickenSalad,VegSpringRolls'),(29,'WaffleTruffle#Soms Shen#Waffles'),(32,'GoodFoodTruck#Claude Shannon#Noodles,SouthWestChickenSalad,VegSpringRolls'),(32,'WaffleTruffle#Soms Shen#Waffles'),(36,'GoodFoodTruck#Claude Shannon#Noodles,SouthWestChickenSalad,VegSpringRolls'),(36,'WaffleTruffle#Soms Shen#Waffles'),(37,'2020-01-01#3#55.11#CheeseBurger,HamBurger,Waffles#10'),(37,'2020-02-01#4#24.04#ChickenWings#4'),(37,'2020-02-03#6#47.81#ChickenTacos,ChickenWings,SalmonTacos#8'),(37,'2020-02-05#11#63.97#ChickenTacos,Nachos,SalmonTacos,VegetarianTacos#11'),(37,'2020-02-10#19#17.52#VegetarianTacos#3'),(37,'2020-02-10#20#16.96#ChickenWings,VegetarianTacos#3'),(37,'2020-02-10#21#21.45#CheeseBurger,ChocolateShake,HamBurger#5'),(37,'2020-02-10#25#4.53#Pie#1'),(37,'2020-02-11#27#7.88#VegPizza#1'),(37,'2020-02-22#28#4.76#CheeseBurger#1'),(37,'2020-02-29#29#31.68#ChickenWings#6'),(37,'2020-03-01#32#18.81#CheeseBurger,Pie#4'),(37,'2020-03-01#33#46.20#ChickenWings,Pie,Waffles#8'),(37,'2020-03-16#42###'),(39,'GoodFoodTruck#Claude Shannon#Noodles,SouthWestChickenSalad,VegSpringRolls'),(39,'WaffleTruffle#Soms Shen#Waffles'),(40,'2020-01-01#3#55.11#CheeseBurger,HamBurger,Waffles#10'),(40,'2020-02-01#4#24.04#ChickenWings#4'),(40,'2020-02-03#6#47.81#ChickenTacos,ChickenWings,SalmonTacos#8'),(40,'2020-02-05#11#63.97#ChickenTacos,Nachos,SalmonTacos,VegetarianTacos#11'),(40,'2020-02-10#19#17.52#VegetarianTacos#3'),(40,'2020-02-10#20#16.96#ChickenWings,VegetarianTacos#3'),(40,'2020-02-10#21#21.45#CheeseBurger,ChocolateShake,HamBurger#5'),(40,'2020-02-10#25#4.53#Pie#1'),(40,'2020-02-11#27#7.88#VegPizza#1'),(40,'2020-02-22#28#4.76#CheeseBurger#1'),(40,'2020-02-29#29#31.68#ChickenWings#6'),(40,'2020-03-01#32#18.81#CheeseBurger,Pie#4'),(40,'2020-03-01#33#46.20#ChickenWings,Pie,Waffles#8'),(40,'2020-03-16#42###'),(41,'MargheritaPizza#2#4'),(41,'Pie#3#6'),(41,'VegPizza#2#5'),(41,'CeasarSalad#1#8'),(41,'HotDog#1#2'),(41,'CheeseBurger#2#8'),(41,'HamBurger#2#12'),(41,'Waffles#3#20'),(41,'ChickenWings#2#39'),(41,'SalmonTacos#3#13'),(41,'ChickenTacos#3#18'),(41,'ElkBurger#2#2'),(41,'Shawarma#1#8'),(41,'TrailMix#1#2'),(41,'Noodles#2#2'),(41,'VegSpringRolls#2#8'),(41,'Nachos#2#6'),(41,'VegetarianTacos#3#9'),(41,'ChocolateShake#3#7'),(41,'VegetarianGumbo#1#2'),(41,'ShrimpGumbo#1#1'),(41,'Bagels#0#0'),(41,'ChickenSandwich#0#0'),(41,'SouthWestChickenSalad#2#0');
